---
// SimpleNavbar.astro - WCAG/ARIA/AODA compliant navigation using theme system
import theme from '../../lib/theme.js';

export interface Props {
  currentPath?: string;
  logo?: {
    src?: string;
    alt?: string;
    text?: string;
  };
  links?: Array<{
    href: string;
    label: string;
    external?: boolean;
    submenu?: Array<{
      href: string;
      label: string;
      external?: boolean;
    }>;
  }>;
  ctaButton?: {
    href: string;
    label: string;
    external?: boolean;
  };
}

const {
  currentPath = '',
  logo = { text: 'Your Company', src: '/logo.svg' },
  links = [
    { href: '/', label: 'Home' },
    { 
      href: '/services', 
      label: 'Services',
      submenu: [
        { href: '/services/web-design', label: 'Web Design' },
        { href: '/services/consulting', label: 'Consulting' }
      ]
    },
    { href: '/about', label: 'About' },
    { href: '/contact', label: 'Contact' }
  ],
  ctaButton = { href: '/contact', label: 'Get Started' }
} = Astro.props;

// Check if current page matches link
const isActive = (href: string) => {
  if (href === '/' && currentPath === '/') return true;
  if (href !== '/' && currentPath.startsWith(href)) return true;
  return false;
};
---

<nav class="navbar" aria-label="Main navigation">
  <div class="navbar-container">
    <!-- Logo -->
    <a href="/" class="logo" aria-label="Go to homepage">
      {logo.src && (
        <img src={logo.src} alt={logo.alt || 'Company logo'} class="logo-img" />
      )}
      {logo.text && <span class="logo-text">{logo.text}</span>}
    </a>

    <!-- Desktop Navigation -->
    <ul class="nav-links desktop-nav">
      {links.map((link) => (
        <li class="nav-item">
          {link.submenu ? (
            <!-- Dropdown -->
            <div class="dropdown">
              <button 
                class={`nav-link dropdown-toggle ${isActive(link.href) ? 'active' : ''}`}
                aria-expanded="false"
                aria-haspopup="true"
              >
                {link.label}
                <svg class="dropdown-arrow" width="12" height="12" aria-hidden="true">
                  <path d="M6 8.5L2.5 5h7L6 8.5z" fill="currentColor"/>
                </svg>
              </button>
              <ul class="dropdown-menu">
                {link.submenu.map((subLink) => (
                  <li>
                    <a 
                      href={subLink.href}
                      class={`dropdown-link ${isActive(subLink.href) ? 'active' : ''}`}
                      {...(subLink.external && { 
                        target: '_blank', 
                        rel: 'noopener noreferrer' 
                      })}
                    >
                      {subLink.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <!-- Regular Link -->
            <a 
              href={link.href}
              class={`nav-link ${isActive(link.href) ? 'active' : ''}`}
              aria-current={isActive(link.href) ? 'page' : undefined}
              {...(link.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer' 
              })}
            >
              {link.label}
            </a>
          )}
        </li>
      ))}
    </ul>

    <!-- CTA Button -->
    {ctaButton && (
      <a 
        href={ctaButton.href}
        class="cta-button desktop-nav"
        {...(ctaButton.external && { 
          target: '_blank', 
          rel: 'noopener noreferrer' 
        })}
      >
        {ctaButton.label}
      </a>
    )}

    <!-- Mobile Menu Button -->
    <button 
      class="mobile-menu-btn mobile-nav" 
      aria-expanded="false"
      aria-controls="mobile-menu"
      aria-label="Open navigation menu"
    >
      <span class="hamburger"></span>
      <span class="hamburger"></span>
      <span class="hamburger"></span>
    </button>
  </div>

  <!-- Mobile Menu -->
  <div class="mobile-menu mobile-nav" id="mobile-menu" aria-hidden="true">
    <ul class="mobile-nav-links">
      {links.map((link) => (
        <li class="mobile-nav-item">
          {link.submenu ? (
            <!-- Mobile Dropdown -->
            <div class="mobile-dropdown">
              <button 
                class={`mobile-nav-link mobile-dropdown-toggle ${isActive(link.href) ? 'active' : ''}`}
                aria-expanded="false"
              >
                {link.label}
                <svg class="mobile-dropdown-arrow" width="16" height="16" aria-hidden="true">
                  <path d="M8 11L4 7h8l-4 4z" fill="currentColor"/>
                </svg>
              </button>
              <ul class="mobile-dropdown-menu">
                {link.submenu.map((subLink) => (
                  <li>
                    <a 
                      href={subLink.href}
                      class={`mobile-dropdown-link ${isActive(subLink.href) ? 'active' : ''}`}
                      {...(subLink.external && { 
                        target: '_blank', 
                        rel: 'noopener noreferrer' 
                      })}
                    >
                      {subLink.label}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <!-- Regular Mobile Link -->
            <a 
              href={link.href}
              class={`mobile-nav-link ${isActive(link.href) ? 'active' : ''}`}
              aria-current={isActive(link.href) ? 'page' : undefined}
              {...(link.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer' 
              })}
            >
              {link.label}
            </a>
          )}
        </li>
      ))}
      
      {ctaButton && (
        <li class="mobile-nav-item">
          <a 
            href={ctaButton.href}
            class="mobile-cta-button"
            {...(ctaButton.external && { 
              target: '_blank', 
              rel: 'noopener noreferrer' 
            })}
          >
            {ctaButton.label}
          </a>
        </li>
      )}
    </ul>
  </div>
</nav>

<style define:vars={{
  // Colors from theme
  primaryColor: theme.colors.primary[500],
  primaryHover: theme.colors.primary[600],
  primaryLight: theme.colors.primary[100],
  neutralWhite: theme.colors.neutral[50],
  neutralGray: theme.colors.neutral[500],
  neutralLight: theme.colors.neutral[100],
  neutralDark: theme.colors.neutral[900],
  borderColor: theme.colors.border,
  backgroundColor: theme.colors.background,
  foregroundColor: theme.colors.foreground,
  mutedColor: theme.colors.muted,
  
  // Typography from theme
  fontSans: theme.typography.fontFamily.sans.join(', '),
  fontDisplay: theme.typography.fontFamily.display.join(', '),
  
  // Spacing from theme
  spacing1: theme.spacing[1],
  spacing2: theme.spacing[2],
  spacing3: theme.spacing[3],
  spacing4: theme.spacing[4],
  spacing5: theme.spacing[5],
  spacing6: theme.spacing[6],
  spacing8: theme.spacing[8],
  spacing11: theme.spacing[11], // 44px for touch targets
  spacing12: theme.spacing[12], // 48px for enhanced touch targets
  spacing16: theme.spacing[16],
  spacing20: theme.spacing[20],
  
  // Border radius from theme
  borderRadiusSm: theme.borderRadius.sm,
  borderRadiusBase: theme.borderRadius.base,
  borderRadiusLg: theme.borderRadius.lg,
  borderRadiusXl: theme.borderRadius.xl,
  
  // Shadows from theme
  shadowSm: theme.boxShadow.sm,
  shadowBase: theme.boxShadow.base,
  shadowMd: theme.boxShadow.md,
  shadowLg: theme.boxShadow.lg,
  
  // Animation from theme
  durationFast: theme.animation.duration.fast,
  durationNormal: theme.animation.duration.normal,
  easingOut: theme.animation.easing.out,
  
  // Component specific from theme
  navbarHeight: theme.components.navbar.height,
  mobileNavbarHeight: theme.components.navbar.mobileHeight,
  
  // Z-index from theme
  zIndexSkipLink: theme.zIndex.skipLink,
  zIndexSticky: theme.zIndex.sticky,
  zIndexDropdown: theme.zIndex.dropdown,
  zIndexModal: theme.zIndex.modal
}}>
  /* Main navbar */
  .navbar {
    background: var(--backgroundColor);
    border-bottom: 1px solid var(--borderColor);
    position: sticky;
    top: 0;
    z-index: var(--zIndexSticky);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  .navbar-container {
    max-width: var(--spacing80); /* 1280px equivalent */
    margin: 0 auto;
    padding: 0 var(--spacing4);
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: var(--mobileNavbarHeight);
    position: relative;
  }

  @media (min-width: 768px) {
    .navbar-container {
      height: var(--navbarHeight);
      padding: 0 var(--spacing6);
    }
  }

  /* Logo - Ensuring proper touch target */
  .logo {
    display: flex;
    align-items: center;
    gap: var(--spacing2);
    text-decoration: none;
    color: var(--foregroundColor);
    font-family: var(--fontDisplay);
    font-weight: 700;
    font-size: 1.25rem;
    padding: var(--spacing3);
    border-radius: var(--borderRadiusLg);
    /* Minimum touch target size */
    min-height: var(--spacing11); /* 44px */
    touch-action: manipulation;
    transition: all var(--durationNormal) var(--easingOut);
  }

  .logo:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .logo:hover {
    opacity: 0.8;
  }

  .logo-img {
    height: var(--spacing8); /* 32px */
    width: auto;
  }

  /* Desktop Navigation */
  .nav-links {
    display: flex;
    align-items: center;
    gap: var(--spacing2);
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-item {
    position: relative;
  }

  .nav-link {
    display: flex;
    align-items: center;
    gap: var(--spacing1);
    text-decoration: none;
    color: var(--neutralGray);
    font-family: var(--fontSans);
    font-weight: 500;
    font-size: 0.9375rem;
    padding: var(--spacing3) var(--spacing4);
    border-radius: var(--borderRadiusLg);
    transition: all var(--durationNormal) var(--easingOut);
    background: none;
    border: none;
    cursor: pointer;
    white-space: nowrap;
    /* Ensure minimum touch target */
    min-height: var(--spacing11); /* 44px */
    touch-action: manipulation;
  }

  .nav-link:hover,
  .nav-link:focus {
    color: var(--primaryColor);
    background: rgba(175, 233, 14, 0.1); /* Using theme primary with alpha */
  }

  .nav-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .nav-link.active {
    color: var(--primaryColor);
    font-weight: 600;
  }

  /* Dropdown */
  .dropdown {
    position: relative;
  }

  .dropdown-arrow {
    transition: transform var(--durationNormal) var(--easingOut);
    flex-shrink: 0;
  }

  .dropdown:hover .dropdown-arrow,
  .dropdown-toggle[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + var(--spacing2));
    left: 0;
    min-width: 200px;
    background: var(--backgroundColor);
    border: 1px solid var(--borderColor);
    border-radius: var(--borderRadiusLg);
    box-shadow: var(--shadowLg);
    list-style: none;
    margin: 0;
    padding: var(--spacing2) 0;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all var(--durationNormal) var(--easingOut);
    z-index: var(--zIndexDropdown);
  }

  .dropdown:hover .dropdown-menu,
  .dropdown-toggle[aria-expanded="true"] + .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-link {
    display: block;
    padding: var(--spacing3) var(--spacing4);
    text-decoration: none;
    color: var(--neutralGray);
    font-family: var(--fontSans);
    transition: all var(--durationNormal) var(--easingOut);
    /* Ensure minimum touch target */
    min-height: var(--spacing11); /* 44px */
    touch-action: manipulation;
  }

  .dropdown-link:hover,
  .dropdown-link:focus {
    background: rgba(175, 233, 14, 0.1);
    color: var(--primaryColor);
  }

  .dropdown-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: -2px;
  }

  .dropdown-link.active {
    color: var(--primaryColor);
    background: rgba(175, 233, 14, 0.1);
  }

  /* CTA Button */
  .cta-button {
    background: var(--primaryColor);
    color: var(--neutralDark);
    text-decoration: none;
    padding: var(--spacing3) var(--spacing6);
    border-radius: var(--borderRadiusLg);
    font-family: var(--fontSans);
    font-weight: 600;
    font-size: 0.9375rem;
    transition: all var(--durationNormal) var(--easingOut);
    border: 2px solid var(--primaryColor);
    /* Ensure minimum touch target */
    min-height: var(--spacing11); /* 44px */
    display: flex;
    align-items: center;
    touch-action: manipulation;
  }

  .cta-button:hover,
  .cta-button:focus {
    background: var(--primaryHover);
    border-color: var(--primaryHover);
    transform: translateY(-1px);
    box-shadow: var(--shadowMd);
  }

  .cta-button:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Mobile Menu Button */
  .mobile-menu-btn {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    background: none;
    border: 2px solid transparent;
    cursor: pointer;
    padding: var(--spacing3);
    border-radius: var(--borderRadiusLg);
    transition: all var(--durationNormal) var(--easingOut);
    /* Ensure proper touch target - using theme spacing */
    min-width: var(--spacing12); /* 48px for enhanced accessibility */
    min-height: var(--spacing12); /* 48px */
    touch-action: manipulation;
  }

  .mobile-menu-btn:hover,
  .mobile-menu-btn:focus {
    background: rgba(175, 233, 14, 0.1);
    border-color: var(--primaryLight);
  }

  .mobile-menu-btn:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .hamburger {
    display: block;
    width: var(--spacing6); /* 24px */
    height: 3px;
    background: var(--foregroundColor);
    transition: all 0.3s var(--easingOut);
    border-radius: 2px;
    margin: 2px 0;
  }

  .mobile-menu-btn[aria-expanded="true"] .hamburger:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-menu-btn[aria-expanded="true"] .hamburger:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-btn[aria-expanded="true"] .hamburger:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  /* Mobile Menu */
  .mobile-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--backgroundColor);
    border-bottom: 1px solid var(--borderColor);
    box-shadow: var(--shadowMd);
    max-height: 0;
    overflow: hidden;
    transition: all 0.3s var(--easingOut);
    z-index: var(--zIndexModal);
  }

  .mobile-menu[aria-hidden="false"] {
    max-height: 100vh;
  }

  .mobile-nav-links {
    list-style: none;
    margin: 0;
    padding: var(--spacing4);
  }

  .mobile-nav-item {
    margin-bottom: var(--spacing2);
  }

  .mobile-nav-item:last-child {
    margin-bottom: 0;
  }

  .mobile-nav-link {
    display: flex;
    align-items: center;
    justify-content: space-between;
    text-decoration: none;
    color: var(--foregroundColor);
    font-family: var(--fontSans);
    font-size: 1.125rem;
    font-weight: 500;
    padding: var(--spacing4) var(--spacing3);
    border-radius: var(--borderRadiusLg);
    transition: all var(--durationNormal) var(--easingOut);
    background: none;
    border: 2px solid transparent;
    cursor: pointer;
    width: 100%;
    text-align: left;
    /* Ensure proper touch targets for mobile */
    min-height: var(--spacing12); /* 48px for mobile */
    touch-action: manipulation;
  }

  .mobile-nav-link:hover,
  .mobile-nav-link:focus {
    color: var(--primaryColor);
    background: rgba(175, 233, 14, 0.1);
    border-color: var(--primaryLight);
  }

  .mobile-nav-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .mobile-nav-link.active {
    color: var(--primaryColor);
    font-weight: 600;
    background: rgba(175, 233, 14, 0.1);
    border-color: var(--primaryColor);
  }

  /* Mobile Dropdown */
  .mobile-dropdown-arrow {
    transition: transform var(--durationNormal) var(--easingOut);
    flex-shrink: 0;
  }

  .mobile-dropdown-toggle[aria-expanded="true"] .mobile-dropdown-arrow {
    transform: rotate(180deg);
  }

  .mobile-dropdown-menu {
    list-style: none;
    margin: 0;
    padding: 0;
    margin-left: var(--spacing4);
    max-height: 0;
    overflow: hidden;
    transition: all 0.3s var(--easingOut);
  }

  .mobile-dropdown-toggle[aria-expanded="true"] + .mobile-dropdown-menu {
    max-height: 500px;
    margin-top: var(--spacing2);
  }

  .mobile-dropdown-link {
    display: block;
    text-decoration: none;
    color: var(--neutralGray);
    font-family: var(--fontSans);
    padding: var(--spacing3);
    border-radius: var(--borderRadiusLg);
    transition: all var(--durationNormal) var(--easingOut);
    margin-bottom: var(--spacing1);
    border: 2px solid transparent;
    /* Ensure proper mobile touch targets */
    min-height: var(--spacing11); /* 44px minimum */
    touch-action: manipulation;
  }

  .mobile-dropdown-link:hover,
  .mobile-dropdown-link:focus {
    background: rgba(175, 233, 14, 0.1);
    color: var(--primaryColor);
    border-color: var(--primaryLight);
  }

  .mobile-dropdown-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .mobile-dropdown-link.active {
    color: var(--primaryColor);
    background: rgba(175, 233, 14, 0.1);
    border-color: var(--primaryColor);
  }

  /* Mobile CTA */
  .mobile-cta-button {
    display: block;
    background: var(--primaryColor);
    color: var(--neutralDark);
    text-decoration: none;
    padding: var(--spacing4);
    border-radius: var(--borderRadiusLg);
    font-family: var(--fontSans);
    font-weight: 600;
    font-size: 1.125rem;
    text-align: center;
    transition: all var(--durationNormal) var(--easingOut);
    margin-top: var(--spacing6);
    border: 2px solid var(--primaryColor);
    /* Enhanced mobile touch target */
    min-height: var(--spacing12); /* 48px */
    touch-action: manipulation;
  }

  .mobile-cta-button:hover,
  .mobile-cta-button:focus {
    background: var(--primaryHover);
    border-color: var(--primaryHover);
  }

  .mobile-cta-button:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Responsive utilities */
  .desktop-nav {
    display: none;
  }

  .mobile-nav {
    display: block;
  }

  @media (min-width: 768px) {
    .desktop-nav {
      display: flex;
    }

    .mobile-nav {
      display: none;
    }
  }

  /* High contrast support */
  @media (prefers-contrast: high) {
    .navbar {
      border-bottom-width: 2px;
    }
    
    .nav-link,
    .mobile-nav-link,
    .dropdown-link,
    .mobile-dropdown-link,
    .logo,
    .cta-button,
    .mobile-cta-button,
    .mobile-menu-btn {
      border-width: 2px;
    }
    
    .nav-link:focus,
    .mobile-nav-link:focus,
    .dropdown-link:focus,
    .mobile-dropdown-link:focus,
    .logo:focus,
    .cta-button:focus,
    .mobile-cta-button:focus,
    .mobile-menu-btn:focus {
      outline-width: 3px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
    
    .dropdown-menu,
    .mobile-menu,
    .mobile-dropdown-menu {
      transition: none;
    }
  }

  /* Print styles */
  @media print {
    .navbar {
      position: static;
      background: white;
      border-bottom: 1px solid black;
    }
    
    .mobile-menu,
    .dropdown-menu,
    .mobile-menu-btn,
    .cta-button,
    .mobile-cta-button {
      display: none !important;
    }
    
    .nav-links {
      display: flex;
      flex-wrap: wrap;
    }
    
    .nav-link {
      color: black;
      text-decoration: underline;
    }
  }
</style>

<script>
  class SimpleNavbar {
    constructor() {
      this.mobileMenuBtn = document.querySelector('.mobile-menu-btn');
      this.mobileMenu = document.querySelector('.mobile-menu');
      this.dropdownToggles = document.querySelectorAll('.dropdown-toggle');
      this.mobileDropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
      
      this.init();
    }

    init() {
      // Mobile menu toggle
      if (this.mobileMenuBtn && this.mobileMenu) {
        this.mobileMenuBtn.addEventListener('click', () => {
          this.toggleMobileMenu();
        });
        
        // Close on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && this.mobileMenu.getAttribute('aria-hidden') === 'false') {
            this.closeMobileMenu();
          }
        });
        
        // Close mobile menu on window resize to desktop
        window.addEventListener('resize', () => {
          if (window.innerWidth >= 768 && this.mobileMenu.getAttribute('aria-hidden') === 'false') {
            this.closeMobileMenu();
          }
        });
      }

      // Desktop dropdowns
      this.dropdownToggles.forEach(toggle => {
        const dropdown = toggle.closest('.dropdown');
        const menu = toggle.nextElementSibling;

        // Mouse events
        dropdown.addEventListener('mouseenter', () => {
          this.openDropdown(toggle, menu);
        });

        dropdown.addEventListener('mouseleave', () => {
          this.closeDropdown(toggle, menu);
        });

        // Keyboard events
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggleDropdown(toggle, menu);
        });

        toggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.toggleDropdown(toggle, menu);
          } else if (e.key === 'Escape') {
            this.closeDropdown(toggle, menu);
          }
        });
      });

      // Mobile dropdowns
      this.mobileDropdownToggles.forEach(toggle => {
        const menu = toggle.nextElementSibling;

        toggle.addEventListener('click', () => {
          this.toggleMobileDropdown(toggle, menu);
        });

        toggle.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.toggleMobileDropdown(toggle, menu);
          }
        });
      });

      // Close dropdowns when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.dropdown')) {
          this.closeAllDropdowns();
        }
      });
      
      // Announce navigation state changes to screen readers
      this.setupScreenReaderAnnouncements();
    }

    toggleMobileMenu() {
      const isOpen = this.mobileMenu.getAttribute('aria-hidden') === 'false';
      
      if (isOpen) {
        this.closeMobileMenu();
      } else {
        this.openMobileMenu();
      }
    }

    openMobileMenu() {
      this.mobileMenuBtn.setAttribute('aria-expanded', 'true');
      this.mobileMenuBtn.setAttribute('aria-label', 'Close navigation menu');
      this.mobileMenu.setAttribute('aria-hidden', 'false');
      document.body.style.overflow = 'hidden';
      this.announceToScreenReader('Navigation menu opened');
    }

    closeMobileMenu() {
      this.mobileMenuBtn.setAttribute('aria-expanded', 'false');
      this.mobileMenuBtn.setAttribute('aria-label', 'Open navigation menu');
      this.mobileMenu.setAttribute('aria-hidden', 'true');
      document.body.style.overflow = '';
      
      // Close all mobile dropdowns when closing menu
      this.mobileDropdownToggles.forEach(toggle => {
        toggle.setAttribute('aria-expanded', 'false');
      });
      
      this.announceToScreenReader('Navigation menu closed');
    }

    toggleDropdown(toggle, menu) {
      const isOpen = toggle.getAttribute('aria-expanded') === 'true';
      
      if (isOpen) {
        this.closeDropdown(toggle, menu);
      } else {
        this.closeAllDropdowns();
        this.openDropdown(toggle, menu);
      }
    }

    openDropdown(toggle, menu) {
      toggle.setAttribute('aria-expanded', 'true');
    }

    closeDropdown(toggle, menu) {
      toggle.setAttribute('aria-expanded', 'false');
    }

    closeAllDropdowns() {
      this.dropdownToggles.forEach(toggle => {
        toggle.setAttribute('aria-expanded', 'false');
      });
    }

    toggleMobileDropdown(toggle, menu) {
      const isOpen = toggle.getAttribute('aria-expanded') === 'true';
      toggle.setAttribute('aria-expanded', !isOpen);
    }
    
    setupScreenReaderAnnouncements() {
      // Create live region for announcements
      if (!document.getElementById('nav-announcements')) {
        const liveRegion = document.createElement('div');
        liveRegion.id = 'nav-announcements';
        liveRegion.setAttribute('aria-live', 'polite');
        liveRegion.setAttribute('aria-atomic', 'true');
        liveRegion.style.position = 'absolute';
        liveRegion.style.left = '-10000px';
        liveRegion.style.width = '1px';
        liveRegion.style.height = '1px';
        liveRegion.style.overflow = 'hidden';
        document.body.appendChild(liveRegion);
      }
    }
    
    announceToScreenReader(message) {
      const liveRegion = document.getElementById('nav-announcements');
      if (liveRegion) {
        liveRegion.textContent = message;
        
        // Clear after announcement
        setTimeout(() => {
          liveRegion.textContent = '';
        }, 1000);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    try {
      new SimpleNavbar();
      
      // Mark as successfully loaded for debugging
      document.documentElement.classList.add('navbar-js-loaded');
      
    } catch (error) {
      console.error('Error initializing navbar:', error);
      
      // Provide basic fallback functionality
      const mobileBtn = document.querySelector('.mobile-menu-btn');
      const mobileMenu = document.querySelector('.mobile-menu');
      
      if (mobileBtn && mobileMenu) {
        mobileBtn.addEventListener('click', () => {
          const isHidden = mobileMenu.getAttribute('aria-hidden') === 'true';
          mobileMenu.setAttribute('aria-hidden', !isHidden);
          mobileBtn.setAttribute('aria-expanded', isHidden);
        });
      }
    }
  });

  // Handle page navigation cleanup
  window.addEventListener('beforeunload', () => {
    document.body.style.overflow = '';
  });

  // Expose utilities for external use
  window.NavbarUtils = {
    closeAllMenus: () => {
      const mobileMenu = document.querySelector('.mobile-menu');
      const mobileButton = document.querySelector('.mobile-menu-btn');
      
      if (mobileMenu && mobileButton) {
        mobileMenu.setAttribute('aria-hidden', 'true');
        mobileButton.setAttribute('aria-expanded', 'false');
        document.body.style.overflow = '';
      }
      
      document.querySelectorAll('.dropdown-toggle').forEach(toggle => {
        toggle.setAttribute('aria-expanded', 'false');
      });
    },
    
    announceToScreenReader: (message) => {
      const liveRegion = document.getElementById('nav-announcements');
      if (liveRegion) {
        liveRegion.textContent = message;
        setTimeout(() => liveRegion.textContent = '', 1000);
      }
    }
  };