---
// Navbar.astro - Responsive and accessible navigation component
import theme from '../../lib/therme';

export interface Props {
  currentPath?: string;
  logo?: {
    src?: string;
    alt?: string;
    text?: string;
  };
  links?: Array<{
    href: string;
    label: string;
    external?: boolean;
  }>;
  ctaButton?: {
    href: string;
    label: string;
    external?: boolean;
  };
}

const {
  currentPath = '',
  logo = { text: 'Agency', src: '/favicon.webp' },
  links = [
    { href: '/', label: 'Home' },
    { href: '/services', label: 'Services' },
    { href: '/about', label: 'About' },
    { href: '/portfolio', label: 'Portfolio' },
    { href: '/blog', label: 'Blog' },
    { href: '/contact', label: 'Contact' }
  ],
  ctaButton = { href: '/contact', label: 'Get Started' }
} = Astro.props;

// Helper function to check if link is active
const isActive = (href: string) => {
  if (href === '/' && currentPath === '/') return true;
  if (href !== '/' && currentPath.startsWith(href)) return true;
  return false;
};
---

<nav class="navbar" aria-label="Main navigation">
  <div class="navbar-container">
    <!-- Logo/Brand -->
    <div class="navbar-brand">
      <a href="/" class="brand-link" aria-label="Home">
        {logo.src ? (
          <img 
            src={logo.src} 
            alt={logo.alt || 'Company logo'} 
            class="brand-logo"
            width="40"
            height="40"
          />
        ) : (
          <span class="brand-text">{logo.text}</span>
        )}
      </a>
    </div>

    <!-- Desktop Navigation -->
    <div class="navbar-menu desktop-only" role="menubar">
      <ul class="nav-list" role="none">
        {links.map((link) => (
          <li role="none">
            <a 
              href={link.href}
              class={`nav-link ${isActive(link.href) ? 'active' : ''}`}
              role="menuitem"
              aria-current={isActive(link.href) ? 'page' : undefined}
              {...(link.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer',
                'aria-label': `${link.label} (opens in new tab)`
              })}
            >
              {link.label}
            </a>
          </li>
        ))}
      </ul>
      
      <!-- CTA Button -->
      {ctaButton && (
        <a 
          href={ctaButton.href}
          class="cta-button"
          {...(ctaButton.external && { 
            target: '_blank', 
            rel: 'noopener noreferrer',
            'aria-label': `${ctaButton.label} (opens in new tab)`
          })}
        >
          {ctaButton.label}
        </a>
      )}
    </div>

    <!-- Mobile Menu Button -->
    <button 
      class="mobile-menu-button mobile-only"
      aria-label="Toggle navigation menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
      data-mobile-menu-toggle
    >
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>
  </div>

  <!-- Mobile Navigation -->
  <div 
    class="mobile-menu mobile-only" 
    id="mobile-menu"
    role="menu"
    aria-hidden="true"
    data-mobile-menu
  >
    <div class="mobile-menu-content">
      <ul class="mobile-nav-list" role="none">
        {links.map((link) => (
          <li role="none">
            <a 
              href={link.href}
              class={`mobile-nav-link ${isActive(link.href) ? 'active' : ''}`}
              role="menuitem"
              aria-current={isActive(link.href) ? 'page' : undefined}
              {...(link.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer',
                'aria-label': `${link.label} (opens in new tab)`
              })}
            >
              {link.label}
            </a>
          </li>
        ))}
      </ul>
      
      {ctaButton && (
        <div class="mobile-cta-container">
          <a 
            href={ctaButton.href}
            class="mobile-cta-button"
            {...(ctaButton.external && { 
              target: '_blank', 
              rel: 'noopener noreferrer',
              'aria-label': `${ctaButton.label} (opens in new tab)`
            })}
          >
            {ctaButton.label}
          </a>
        </div>
      )}
    </div>
  </div>
</nav>

<style define:vars={{
  primaryColor: theme.colors.primary[500],
  primaryHover: theme.colors.primary[600],
  neutralWhite: theme.colors.neutral[50],
  neutralGray: theme.colors.neutral[500],
  neutralDark: theme.colors.neutral[900],
  borderColor: theme.colors.border,
  navbarHeight: theme.components.navbar.height,
  mobileNavbarHeight: theme.components.navbar.mobileHeight,
  fontSans: theme.typography.fontFamily.sans.join(', '),
  fontDisplay: theme.typography.fontFamily.display.join(', '),
  spacing2: theme.spacing[2],
  spacing3: theme.spacing[3],
  spacing4: theme.spacing[4],
  spacing6: theme.spacing[6],
  spacing8: theme.spacing[8],
  borderRadiusLg: theme.borderRadius.lg,
  shadowMd: theme.boxShadow.md,
  transitionNormal: theme.animation.duration.normal,
  breakpointMd: theme.breakpoints.md
}}>
  .navbar {
    position: sticky;
    top: 0;
    z-index: 1100;
    background: var(--neutralWhite);
    border-bottom: 1px solid var(--borderColor);
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
  }

  .navbar-container {
    max-width: 1280px;
    margin: 0 auto;
    padding: 0 var(--spacing4);
    display: flex;
    align-items: center;
    justify-content: space-between;
    height: var(--mobileNavbarHeight);
  }

  @media (min-width: 768px) {
    .navbar-container {
      height: var(--navbarHeight);
      padding: 0 var(--spacing6);
    }
  }

  /* Brand/Logo Styles */
  .navbar-brand {
    flex-shrink: 0;
  }

  .brand-link {
    display: flex;
    align-items: center;
    text-decoration: none;
    color: var(--neutralDark);
    transition: opacity var(--transitionNormal) ease;
  }

  .brand-link:hover,
  .brand-link:focus {
    opacity: 0.8;
  }

  .brand-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
    border-radius: var(--spacing2);
  }

  .brand-logo {
    height: 40px;
    width: auto;
  }

  .brand-text {
    font-family: var(--fontDisplay);
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primaryColor);
  }

  /* Desktop Navigation */
  .navbar-menu {
    display: flex;
    align-items: center;
    gap: var(--spacing8);
  }

  .nav-list {
    display: flex;
    align-items: center;
    gap: var(--spacing6);
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .nav-link {
    font-family: var(--fontSans);
    font-size: 0.9375rem;
    font-weight: 500;
    color: var(--neutralGray);
    text-decoration: none;
    padding: var(--spacing2) var(--spacing3);
    border-radius: var(--borderRadiusLg);
    transition: all var(--transitionNormal) ease;
    position: relative;
  }

  .nav-link:hover,
  .nav-link:focus {
    color: var(--primaryColor);
    background: rgba(14, 165, 233, 0.05);
  }

  .nav-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .nav-link.active {
    color: var(--primaryColor);
    font-weight: 600;
  }

  .nav-link.active::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 50%;
    transform: translateX(-50%);
    width: 6px;
    height: 6px;
    background: var(--primaryColor);
    border-radius: 50%;
  }

  /* CTA Button */
  .cta-button {
    font-family: var(--fontSans);
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--neutralWhite);
    background: var(--primaryColor);
    text-decoration: none;
    padding: var(--spacing3) var(--spacing6);
    border-radius: var(--borderRadiusLg);
    transition: all var(--transitionNormal) ease;
    border: 2px solid var(--primaryColor);
  }

  .cta-button:hover,
  .cta-button:focus {
    background: var(--primaryHover);
    border-color: var(--primaryHover);
    transform: translateY(-1px);
    box-shadow: var(--shadowMd);
  }

  .cta-button:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Mobile Menu Button */
  .mobile-menu-button {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 40px;
    height: 40px;
    background: none;
    border: none;
    cursor: pointer;
    padding: var(--spacing2);
    border-radius: var(--borderRadiusLg);
    transition: background var(--transitionNormal) ease;
  }

  .mobile-menu-button:hover,
  .mobile-menu-button:focus {
    background: rgba(14, 165, 233, 0.05);
  }

  .mobile-menu-button:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .hamburger-line {
    display: block;
    width: 20px;
    height: 2px;
    background: var(--neutralDark);
    margin: 2px 0;
    transition: all 0.3s ease;
    border-radius: 1px;
  }

  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  /* Mobile Menu */
  .mobile-menu {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--neutralWhite);
    border-bottom: 1px solid var(--borderColor);
    box-shadow: var(--shadowMd);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
  }

  .mobile-menu[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .mobile-menu-content {
    padding: var(--spacing6) var(--spacing4);
  }

  .mobile-nav-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .mobile-nav-link {
    display: block;
    font-family: var(--fontSans);
    font-size: 1.125rem;
    font-weight: 500;
    color: var(--neutralGray);
    text-decoration: none;
    padding: var(--spacing4) var(--spacing3);
    border-radius: var(--borderRadiusLg);
    transition: all var(--transitionNormal) ease;
    margin-bottom: var(--spacing2);
  }

  .mobile-nav-link:hover,
  .mobile-nav-link:focus {
    color: var(--primaryColor);
    background: rgba(14, 165, 233, 0.05);
  }

  .mobile-nav-link:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .mobile-nav-link.active {
    color: var(--primaryColor);
    font-weight: 600;
    background: rgba(14, 165, 233, 0.05);
  }

  .mobile-cta-container {
    margin-top: var(--spacing6);
    padding-top: var(--spacing6);
    border-top: 1px solid var(--borderColor);
  }

  .mobile-cta-button {
    display: block;
    font-family: var(--fontSans);
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--neutralWhite);
    background: var(--primaryColor);
    text-decoration: none;
    text-align: center;
    padding: var(--spacing4) var(--spacing6);
    border-radius: var(--borderRadiusLg);
    transition: all var(--transitionNormal) ease;
    border: 2px solid var(--primaryColor);
  }

  .mobile-cta-button:hover,
  .mobile-cta-button:focus {
    background: var(--primaryHover);
    border-color: var(--primaryHover);
  }

  .mobile-cta-button:focus {
    outline: 2px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Responsive utility classes */
  .desktop-only {
    display: none;
  }

  .mobile-only {
    display: block;
  }

  @media (min-width: 768px) {
    .desktop-only {
      display: flex;
    }

    .mobile-only {
      display: none;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script>
  // Mobile menu functionality
  class MobileNavigation {
    constructor() {
      this.button = document.querySelector('[data-mobile-menu-toggle]');
      this.menu = document.querySelector('[data-mobile-menu]');
      this.isOpen = false;
      
      this.init();
    }

    init() {
      if (!this.button || !this.menu) return;

      // Button click handler
      this.button.addEventListener('click', () => this.toggle());

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.close();
        }
      });

      // Close when clicking outside
      document.addEventListener('click', (e) => {
        if (this.isOpen && !this.button.contains(e.target) && !this.menu.contains(e.target)) {
          this.close();
        }
      });

      // Close on window resize (when switching to desktop)
      window.addEventListener('resize', () => {
        if (window.innerWidth >= 768 && this.isOpen) {
          this.close();
        }
      });

      // Handle focus management
      this.setupFocusManagement();
    }

    toggle() {
      this.isOpen ? this.close() : this.open();
    }

    open() {
      this.isOpen = true;
      this.button.setAttribute('aria-expanded', 'true');
      this.menu.setAttribute('aria-hidden', 'false');
      
      // Focus first menu item
      const firstMenuItem = this.menu.querySelector('a');
      if (firstMenuItem) {
        firstMenuItem.focus();
      }
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
    }

    close() {
      this.isOpen = false;
      this.button.setAttribute('aria-expanded', 'false');
      this.menu.setAttribute('aria-hidden', 'true');
      
      // Return focus to button
      this.button.focus();
      
      // Restore body scroll
      document.body.style.overflow = '';
    }

    setupFocusManagement() {
      const menuItems = this.menu.querySelectorAll('a');
      
      menuItems.forEach((item, index) => {
        item.addEventListener('keydown', (e) => {
          if (e.key === 'Tab') {
            // If last item and tabbing forward, close menu
            if (index === menuItems.length - 1 && !e.shiftKey) {
              e.preventDefault();
              this.close();
            }
            // If first item and tabbing backward, close menu
            if (index === 0 && e.shiftKey) {
              e.preventDefault();
              this.close();
            }
          }
        });
      });
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new MobileNavigation();
  });

  // Handle page navigation (close mobile menu if open)
  window.addEventListener('beforeunload', () => {
    document.body.style.overflow = '';
  });
</script>