---
// ServicesProcess.astro
import theme from '../../lib/therme';

export interface Props {
  variant?: 'horizontal' | 'vertical' | 'timeline' | 'circular';
  sectionTitle?: string;
  sectionSubtitle?: string;
  steps: Array<{
    number?: string;
    icon: string;
    title: string;
    description: string;
    duration?: string;
    deliverables?: string[];
    image?: string;
  }>;
  backgroundColor?: 'white' | 'gray' | 'dark' | 'gradient';
  showNumbers?: boolean;
  showDuration?: boolean;
  showDeliverables?: boolean;
  centerContent?: boolean;
  accentColor?: 'primary' | 'secondary' | 'gradient';
}

const {
  variant = 'horizontal',
  sectionTitle = 'Our Process',
  sectionSubtitle = 'A proven methodology that delivers results every time',
  steps,
  backgroundColor = 'gray',
  showNumbers = true,
  showDuration = false,
  showDeliverables = false,
  centerContent = true,
  accentColor = 'primary'
} = Astro.props;

const getAccentColors = (color: string) => {
  switch (color) {
    case 'secondary':
      return {
        main: theme.colors.secondary[500],
        light: theme.colors.secondary[100],
        dark: theme.colors.secondary[700]
      };
    case 'gradient':
      return {
        main: `linear-gradient(135deg, ${theme.colors.primary[500]}, ${theme.colors.secondary[500]})`,
        light: theme.colors.primary[100],
        dark: theme.colors.primary[700]
      };
    default:
      return {
        main: theme.colors.primary[500],
        light: theme.colors.primary[100],
        dark: theme.colors.primary[700]
      };
  }
};

const colors = getAccentColors(accentColor);
---

<section class={`services-process variant-${variant} bg-${backgroundColor} accent-${accentColor}`}>
  <div class="container">
    {(sectionTitle || sectionSubtitle) && (
      <div class={`section-header ${centerContent ? 'centered' : ''}`}>
        {sectionTitle && <h2 class="section-title">{sectionTitle}</h2>}
        {sectionSubtitle && <p class="section-subtitle">{sectionSubtitle}</p>}
      </div>
    )}

    {variant === 'horizontal' && (
      <div class="process-horizontal">
        <div class="steps-container">
          {steps.map((step, index) => (
            <div class="process-step" data-index={index}>
              <div class="step-header">
                {showNumbers && (
                  <div class="step-number">
                    {step.number || String(index + 1).padStart(2, '0')}
                  </div>
                )}
                <div class="step-icon">{step.icon}</div>
              </div>
              
              <div class="step-content">
                <h3 class="step-title">{step.title}</h3>
                {showDuration && step.duration && (
                  <div class="step-duration">{step.duration}</div>
                )}
                <p class="step-description">{step.description}</p>
                
                {showDeliverables && step.deliverables && step.deliverables.length > 0 && (
                  <div class="step-deliverables">
                    <h4 class="deliverables-title">Deliverables:</h4>
                    <ul class="deliverables-list">
                      {step.deliverables.map((item) => (
                        <li>{item}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>

              {index < steps.length - 1 && (
                <div class="step-connector">
                  <div class="connector-line"></div>
                  <div class="connector-arrow">â†’</div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    )}

    {variant === 'vertical' && (
      <div class="process-vertical">
        {steps.map((step, index) => (
          <div class="process-step vertical" data-index={index}>
            <div class="step-sidebar">
              {showNumbers && (
                <div class="step-number">{step.number || String(index + 1)}</div>
              )}
              <div class="step-line"></div>
            </div>
            
            <div class="step-main">
              <div class="step-header">
                <div class="step-icon">{step.icon}</div>
                <div class="step-meta">
                  <h3 class="step-title">{step.title}</h3>
                  {showDuration && step.duration && (
                    <span class="step-duration">{step.duration}</span>
                  )}
                </div>
              </div>
              
              <p class="step-description">{step.description}</p>
              
              {showDeliverables && step.deliverables && step.deliverables.length > 0 && (
                <div class="step-deliverables">
                  <h4 class="deliverables-title">What you'll receive:</h4>
                  <ul class="deliverables-list">
                    {step.deliverables.map((item) => (
                      <li>{item}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    )}

    {variant === 'timeline' && (
      <div class="process-timeline">
        <div class="timeline-line"></div>
        {steps.map((step, index) => (
          <div class={`timeline-item ${index % 2 === 0 ? 'left' : 'right'}`} data-index={index}>
            <div class="timeline-marker">
              {showNumbers && (
                <div class="marker-number">{step.number || index + 1}</div>
              )}
              <div class="marker-icon">{step.icon}</div>
            </div>
            
            <div class="timeline-content">
              <div class="timeline-header">
                <h3 class="step-title">{step.title}</h3>
                {showDuration && step.duration && (
                  <span class="step-duration">{step.duration}</span>
                )}
              </div>
              
              <p class="step-description">{step.description}</p>
              
              {step.image && (
                <div class="timeline-image">
                  <img src={step.image} alt={step.title} />
                </div>
              )}
              
              {showDeliverables && step.deliverables && step.deliverables.length > 0 && (
                <div class="step-deliverables compact">
                  {step.deliverables.map((item) => (
                    <span class="deliverable-tag">{item}</span>
                  ))}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    )}

    {variant === 'circular' && (
      <div class="process-circular">
        <div class="circular-container">
          <div class="center-content">
            <div class="center-icon">ðŸŽ¯</div>
            <h3 class="center-title">Success</h3>
          </div>
          
          {steps.map((step, index) => {
            const angle = (360 / steps.length) * index;
            return (
              <div 
                class="circular-step" 
                data-index={index}
                style={`transform: rotate(${angle}deg) translateY(-200px) rotate(-${angle}deg);`}
              >
                <div class="circular-number">{step.number || index + 1}</div>
                <div class="circular-icon">{step.icon}</div>
                <h4 class="circular-title">{step.title}</h4>
                <p class="circular-description">{step.description}</p>
              </div>
            );
          })}
        </div>
      </div>
    )}
  </div>
</section>

<style define:vars={{
  primaryColor: theme.colors.primary[500],
  primaryLight: theme.colors.primary[100],
  primaryDark: theme.colors.primary[700],
  secondaryColor: theme.colors.secondary[500],
  secondaryLight: theme.colors.secondary[100],
  secondaryDark: theme.colors.secondary[700],
  neutral900: theme.colors.neutral[900],
  neutral800: theme.colors.neutral[800],
  neutral700: theme.colors.neutral[700],
  neutral600: theme.colors.neutral[600],
  neutral500: theme.colors.neutral[500],
  neutral200: theme.colors.neutral[200],
  neutral100: theme.colors.neutral[100],
  neutral50: theme.colors.neutral[50],
  fontDisplay: theme.typography.fontFamily.display.join(', '),
  fontSans: theme.typography.fontFamily.sans.join(', '),
  spacing24: theme.spacing[24],
  spacing20: theme.spacing[20],
  spacing16: theme.spacing[16],
  spacing12: theme.spacing[12],
  spacing8: theme.spacing[8],
  spacing6: theme.spacing[6],
  spacing4: theme.spacing[4],
  spacing3: theme.spacing[3],
  spacing2: theme.spacing[2],
  borderRadiusXl: theme.borderRadius.xl,
  borderRadius2xl: theme.borderRadius['2xl'],
  shadowMd: theme.boxShadow.md,
  shadowLg: theme.boxShadow.lg,
  shadowXl: theme.boxShadow.xl,
  animationNormal: theme.animation.duration.normal,
  animationSlow: theme.animation.duration.slow,
  easingInOut: theme.animation.easing['in-out'],
  containerMaxWidth: theme.layout.container.xl
}}>
  .services-process {
    padding: var(--spacing20) 0;
    position: relative;
    overflow: hidden;
  }

  /* Background variants */
  .bg-white {
    background: white;
  }

  .bg-gray {
    background: var(--neutral50);
  }

  .bg-dark {
    background: var(--neutral900);
    color: white;
  }

  .bg-gradient {
    background: linear-gradient(135deg, var(--primaryLight) 0%, var(--secondaryLight) 100%);
  }

  .container {
    max-width: var(--containerMaxWidth);
    margin: 0 auto;
    padding: 0 var(--spacing6);
  }

  /* Section Header */
  .section-header {
    margin-bottom: var(--spacing16);
    animation: fadeInUp var(--animationSlow) var(--easingInOut);
  }

  .section-header.centered {
    text-align: center;
    max-width: 700px;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: var(--spacing16);
  }

  .section-title {
    font-family: var(--fontDisplay);
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 700;
    color: var(--neutral900);
    margin-bottom: var(--spacing4);
    line-height: 1.2;
  }

  .bg-dark .section-title {
    color: white;
  }

  .section-subtitle {
    font-family: var(--fontSans);
    font-size: 1.25rem;
    color: var(--neutral600);
    line-height: 1.6;
  }

  .bg-dark .section-subtitle {
    color: var(--neutral200);
  }

  /* Horizontal Variant */
  .process-horizontal {
    position: relative;
  }

  .steps-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--spacing8);
    position: relative;
  }

  .process-step {
    position: relative;
    animation: fadeInUp var(--animationSlow) var(--easingInOut);
    animation-delay: calc(var(--index, 0) * 200ms);
  }

  .step-header {
    display: flex;
    align-items: center;
    gap: var(--spacing4);
    margin-bottom: var(--spacing6);
  }

  .step-number {
    background: linear-gradient(135deg, var(--primaryColor), var(--primaryDark));
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: var(--fontDisplay);
    font-weight: 700;
    font-size: 1.2rem;
    flex-shrink: 0;
  }

  .accent-secondary .step-number {
    background: linear-gradient(135deg, var(--secondaryColor), var(--secondaryDark));
  }

  .accent-gradient .step-number {
    background: linear-gradient(135deg, var(--primaryColor), var(--secondaryColor));
  }

  .step-icon {
    font-size: 2.5rem;
    background: var(--primaryLight);
    width: 80px;
    height: 80px;
    border-radius: var(--borderRadius2xl);
    display: flex;
    align-items: center;
    justify-content: center;
    border: 3px solid var(--primaryColor);
  }

  .accent-secondary .step-icon {
    background: var(--secondaryLight);
    border-color: var(--secondaryColor);
  }

  .step-content {
    background: white;
    padding: var(--spacing6);
    border-radius: var(--borderRadius2xl);
    box-shadow: var(--shadowMd);
    border: 1px solid var(--neutral100);
    transition: all var(--animationNormal) var(--easingInOut);
  }

  .process-step:hover .step-content {
    transform: translateY(-4px);
    box-shadow: var(--shadowLg);
  }

  .bg-dark .step-content {
    background: var(--neutral800);
    border-color: var(--neutral700);
    color: white;
  }

  .step-title {
    font-family: var(--fontDisplay);
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--neutral900);
    margin-bottom: var(--spacing3);
  }

  .bg-dark .step-title {
    color: white;
  }

  .step-duration {
    background: var(--primaryLight);
    color: var(--primaryDark);
    padding: var(--spacing2) var(--spacing3);
    border-radius: var(--borderRadiusXl);
    font-size: 0.875rem;
    font-weight: 600;
    display: inline-block;
    margin-bottom: var(--spacing3);
  }

  .step-description {
    color: var(--neutral600);
    line-height: 1.6;
    margin-bottom: var(--spacing4);
  }

  .bg-dark .step-description {
    color: var(--neutral300);
  }

  .step-deliverables {
    margin-top: var(--spacing4);
  }

  .deliverables-title {
    font-family: var(--fontSans);
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--neutral700);
    margin-bottom: var(--spacing2);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .bg-dark .deliverables-title {
    color: var(--neutral200);
  }

  .deliverables-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .deliverables-list li {
    color: var(--neutral600);
    font-size: 0.9rem;
    margin-bottom: var(--spacing2);
    padding-left: var(--spacing4);
    position: relative;
  }

  .deliverables-list li::before {
    content: 'â€¢';
    color: var(--primaryColor);
    position: absolute;
    left: 0;
    font-weight: bold;
  }

  .bg-dark .deliverables-list li {
    color: var(--neutral300);
  }

  .step-connector {
    position: absolute;
    top: 50%;
    right: -50px;
    width: 100px;
    display: flex;
    align-items: center;
    gap: var(--spacing2);
    pointer-events: none;
  }

  .connector-line {
    flex: 1;
    height: 2px;
    background: linear-gradient(90deg, var(--primaryColor), transparent);
  }

  .connector-arrow {
    color: var(--primaryColor);
    font-size: 1.5rem;
    font-weight: bold;
  }

  /* Vertical Variant */
  .process-vertical {
    position: relative;
  }

  .process-step.vertical {
    display: flex;
    gap: var(--spacing6);
    margin-bottom: var(--spacing12);
    animation: fadeInLeft var(--animationSlow) var(--easingInOut);
    animation-delay: calc(var(--index, 0) * 300ms);
  }

  .step-sidebar {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-shrink: 0;
  }

  .process-step.vertical .step-number {
    margin-bottom: var(--spacing4);
  }

  .step-line {
    width: 2px;
    height: 100px;
    background: linear-gradient(180deg, var(--primaryColor), var(--primaryLight));
  }

  .step-main {
    flex: 1;
    background: white;
    padding: var(--spacing6);
    border-radius: var(--borderRadius2xl);
    box-shadow: var(--shadowMd);
    border: 1px solid var(--neutral100);
  }

  .bg-dark .step-main {
    background: var(--neutral800);
    border-color: var(--neutral700);
  }

  .process-step.vertical .step-header {
    margin-bottom: var(--spacing4);
  }

  .process-step.vertical .step-icon {
    width: 60px;
    height: 60px;
    font-size: 2rem;
  }

  .step-meta {
    display: flex;
    align-items: center;
    gap: var(--spacing3);
    flex-wrap: wrap;
  }

  /* Timeline Variant */
  .process-timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
  }

  .timeline-line {
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(180deg, var(--primaryColor), var(--primaryLight));
    transform: translateX(-50%);
  }

  .timeline-item {
    position: relative;
    margin-bottom: var(--spacing16);
    animation: fadeInUp var(--animationSlow) var(--easingInOut);
    animation-delay: calc(var(--index, 0) * 250ms);
  }

  .timeline-item.left {
    padding-right: 55%;
  }

  .timeline-item.right {
    padding-left: 55%;
  }

  .timeline-marker {
    position: absolute;
    left: 50%;
    top: 20px;
    transform: translateX(-50%);
    background: white;
    border: 4px solid var(--primaryColor);
    border-radius: 50%;
    width: 80px;
    height: 80px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadowMd);
  }

  .marker-number {
    font-size: 0.75rem;
    font-weight: 700;
    color: var(--primaryColor);
  }

  .marker-icon {
    font-size: 1.5rem;
  }

  .timeline-content {
    background: white;
    padding: var(--spacing6);
    border-radius: var(--borderRadius2xl);
    box-shadow: var(--shadowMd);
    border: 1px solid var(--neutral100);
    position: relative;
  }

  .bg-dark .timeline-content {
    background: var(--neutral800);
    border-color: var(--neutral700);
  }

  .timeline-content::before {
    content: '';
    position: absolute;
    top: 30px;
    width: 0;
    height: 0;
    border: 15px solid transparent;
  }

  .timeline-item.left .timeline-content::before {
    right: -30px;
    border-left-color: white;
  }

  .timeline-item.right .timeline-content::before {
    left: -30px;
    border-right-color: white;
  }

  .bg-dark .timeline-item.left .timeline-content::before {
    border-left-color: var(--neutral800);
  }

  .bg-dark .timeline-item.right .timeline-content::before {
    border-right-color: var(--neutral800);
  }

  .timeline-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--spacing4);
    flex-wrap: wrap;
    gap: var(--spacing3);
  }

  .timeline-image {
    margin: var(--spacing4) 0;
    border-radius: var(--borderRadiusXl);
    overflow: hidden;
  }

  .timeline-image img {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .step-deliverables.compact {
    display: flex;
    flex-wrap: wrap;
    gap: var(--spacing2);
    margin-top: var(--spacing4);
  }

  .deliverable-tag {
    background: var(--primaryLight);
    color: var(--primaryDark);
    padding: var(--spacing2) var(--spacing3);
    border-radius: var(--borderRadiusXl);
    font-size: 0.8rem;
    font-weight: 500;
  }

  /* Circular Variant */
  .process-circular {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 600px;
  }

  .circular-container {
    position: relative;
    width: 500px;
    height: 500px;
  }

  .center-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    background: white;
    border: 4px solid var(--primaryColor);
    border-radius: 50%;
    width: 120px;
    height: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadowLg);
  }

  .center-icon {
    font-size: 2rem;
    margin-bottom: var(--spacing2);
  }

  .center-title {
    font-family: var(--fontDisplay);
    font-weight: 600;
    color: var(--primaryColor);
    margin: 0;
  }

  .circular-step {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200px;
    text-align: center;
    background: white;
    padding: var(--spacing4);
    border-radius: var(--borderRadius2xl);
    box-shadow: var(--shadowMd);
    border: 1px solid var(--neutral100);
    animation: fadeInScale var(--animationSlow) var(--easingInOut);
    animation-delay: calc(var(--index, 0) * 200ms);
  }

  .circular-number {
    background: var(--primaryColor);
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    margin: 0 auto var(--spacing2) auto;
    font-size: 0.9rem;
  }

  .circular-icon {
    font-size: 2rem;
    margin-bottom: var(--spacing2);
  }

  .circular-title {
    font-family: var(--fontDisplay);
    font-size: 1rem;
    font-weight: 600;
    color: var(--neutral900);
    margin-bottom: var(--spacing2);
  }

  .circular-description {
    font-size: 0.8rem;
    color: var(--neutral600);
    line-height: 1.4;
    margin: 0;
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .steps-container {
      grid-template-columns: 1fr;
    }

    .step-connector {
      display: none;
    }

    .process-step.vertical {
      flex-direction: column;
      text-align: center;
    }

    .step-sidebar {
      flex-direction: row;
      justify-content: center;
      margin-bottom: var(--spacing4);
    }

    .step-line {
      width: 100px;
      height: 2px;
    }

    .timeline-item.left,
    .timeline-item.right {
      padding: 0;
      padding-left: 100px;
    }

    .timeline-content::before {
      display: none;
    }

    .circular-container {
      width: 400px;
      height: 400px;
    }
  }

  @media (max-width: 768px) {
    .services-process {
      padding: var(--spacing16) 0;
    }

    .timeline-line {
      left: 30px;
    }

    .timeline-marker {
      left: 30px;
      width: 60px;
      height: 60px;
    }

    .timeline-item.left,
    .timeline-item.right {
      padding-left: 80px;
    }

    .circular-container {
      width: 300px;
      height: 300px;
    }

    .circular-step {
      width: 150px;
      padding: var(--spacing3);
    }

    .center-content {
      width: 100px;
      height: 100px;
    }
  }

  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInScale {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .services-process *,
    .services-process *::before,
    .services-process *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>