---
import theme from '../../lib/theme';

export interface Props {
  // Content props
  headline?: string;
  subheadline?: string;
  description?: string;
  primaryCta?: {
    text: string;
    href: string;
    external?: boolean;
  };
  secondaryCta?: {
    text: string;
    href: string;
    external?: boolean;
  };
  
  // Visual props
  backgroundImage?: string;
  backgroundVideo?: string;
  heroImage?: string;
  heroImageAlt?: string;
  
  // Layout props
  variant?: 'centered' | 'left-aligned' | 'split' | 'process-focused';
  showStats?: boolean;
  stats?: Array<{
    number: string;
    label: string;
    prefix?: string;
    suffix?: string;
  }>;
  
  // Process-specific props
  showProcess?: boolean;
  processSteps?: Array<{
    number: string;
    title: string;
    description: string;
    icon?: string;
  }>;
  
  // Before/After props
  showBeforeAfter?: boolean;
  beforeAfter?: {
    before: {
      image: string;
      alt: string;
      stats: Array<{ label: string; value: string; }>;
    };
    after: {
      image: string;
      alt: string;
      stats: Array<{ label: string; value: string; }>;
    };
  };
  
  // Social proof
  showLogos?: boolean;
  clientLogos?: Array<{
    src: string;
    alt: string;
    width?: number;
    height?: number;
  }>;
  trustedByText?: string;
  
  // Accessibility props
  headingLevel?: 1 | 2 | 3 | 4 | 5 | 6;
  skipToContent?: boolean;
}

const {
  headline = "We Build Digital Experiences That Drive Results",
  subheadline = "Transform Your Business",
  description = "Partner with us to create exceptional digital solutions that captivate your audience, drive engagement, and accelerate your growth in the digital landscape.",
  primaryCta = { text: "Start Your Project", href: "/contact" },
  secondaryCta = { text: "View Our Work", href: "/portfolio" },
  backgroundImage,
  backgroundVideo,
  heroImage = "/background.webp",
  heroImageAlt = "Digital solutions illustration",
  variant = "split",
  showStats = true,
  stats = [
    { number: "150", suffix: "+", label: "Projects Completed" },
    { number: "98", suffix: "%", label: "Client Satisfaction" },
    { number: "5", suffix: "x", label: "ROI Average" },
    { number: "24", suffix: "/7", label: "Support Available" }
  ],
  showProcess = false,
  processSteps = [
    { number: "1", title: "Send Content", description: "Share your text, images, and brand assets", icon: "ðŸ“¤" },
    { number: "2", title: "We Build", description: "Custom development on enterprise infrastructure", icon: "ðŸ”§" },
    { number: "3", title: "You're Live", description: "Simple DNS change, zero downtime launch", icon: "ðŸš€" }
  ],
  showBeforeAfter = false,
  beforeAfter = {
    before: {
      image: "/before-site.webp",
      alt: "Slow WordPress site",
      stats: [
        { label: "Load Time", value: "3.2s" },
        { label: "Security Score", value: "C" },
        { label: "SEO Score", value: "65" }
      ]
    },
    after: {
      image: "/after-site.webp", 
      alt: "Fast Astro site",
      stats: [
        { label: "Load Time", value: "0.8s" },
        { label: "Security Score", value: "A+" },
        { label: "SEO Score", value: "98" }
      ]
    }
  },
  showLogos = true,
  clientLogos = [
    { src: "/logos/client-1.svg", alt: "Client 1", width: 120, height: 40 },
    { src: "/logos/client-2.svg", alt: "Client 2", width: 120, height: 40 },
    { src: "/logos/client-3.svg", alt: "Client 3", width: 120, height: 40 },
    { src: "/logos/client-4.svg", alt: "Client 4", width: 120, height: 40 },
    { src: "/logos/client-5.svg", alt: "Client 5", width: 120, height: 40 }
  ],
  trustedByText = "Trusted by industry leaders",
  headingLevel = 1,
  skipToContent = true
} = Astro.props;

// Dynamic heading element based on level
const HeadingTag = `h${headingLevel}` as any;
const SubheadingLevel = Math.min(headingLevel + 1, 6);
const SubheadingTag = `h${SubheadingLevel}` as any;
---

{skipToContent && (
  <a href="#main-content" class="skip-link" aria-label="Skip to main content">
    Skip to main content
  </a>
)}

<section 
  class={`hero hero-${variant}`}
  aria-labelledby="hero-headline"
  role="banner"
>
  <!-- Background Elements -->
  {backgroundVideo && (
    <div class="hero-background" aria-hidden="true">
      <video 
        autoplay 
        muted 
        loop 
        playsinline
        class="hero-video"
        aria-hidden="true"
        preload="metadata"
      >
        <source src={backgroundVideo} type="video/mp4" />
        <p>Your browser does not support the video tag.</p>
      </video>
      <div class="hero-video-overlay"></div>
    </div>
  )}
  
  {backgroundImage && !backgroundVideo && (
    <div class="hero-background" aria-hidden="true">
      <img 
        src={backgroundImage} 
        alt="" 
        class="hero-bg-image"
        aria-hidden="true"
        role="presentation"
      />
      <div class="hero-bg-overlay"></div>
    </div>
  )}

  <!-- Animated Background Elements -->
  <div class="hero-decoration" aria-hidden="true" role="presentation">
    <div class="floating-shapes">
      <div class="shape shape-1"></div>
      <div class="shape shape-2"></div>
      <div class="shape shape-3"></div>
      <div class="shape shape-4"></div>
    </div>
  </div>

  <div class="hero-container">
    <div class="hero-content">
      <!-- Text Content -->
      <div class="hero-text">
        {subheadline && (
          <p class="hero-subheadline" data-animate="fade-up">
            {subheadline}
          </p>
        )}
        
        <HeadingTag 
          id="hero-headline" 
          class="hero-headline"
          data-animate="fade-up"
          data-delay="100"
        >
          {headline}
        </HeadingTag>
        
        <p 
          class="hero-description"
          data-animate="fade-up"
          data-delay="200"
        >
          {description}
        </p>
        
        <!-- CTA Buttons -->
        <div 
          class="hero-cta"
          data-animate="fade-up"
          data-delay="300"
          role="group"
          aria-label="Call to action buttons"
        >
          <a 
            href={primaryCta.href}
            class="cta-primary"
            aria-describedby="primary-cta-description"
            {...(primaryCta.external && { 
              target: '_blank', 
              rel: 'noopener noreferrer',
              'aria-label': `${primaryCta.text} (opens in new tab)`
            })}
          >
            <span>{primaryCta.text}</span>
            <svg class="cta-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" aria-hidden="true" focusable="false">
              <path d="M4.16667 10H15.8333M15.8333 10L10.8333 5M15.8333 10L10.8333 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </a>
          <span id="primary-cta-description" class="sr-only">Primary call to action</span>
          
          {secondaryCta && (
            <a 
              href={secondaryCta.href}
              class="cta-secondary"
              aria-describedby="secondary-cta-description"
              {...(secondaryCta.external && { 
                target: '_blank', 
                rel: 'noopener noreferrer',
                'aria-label': `${secondaryCta.text} (opens in new tab)`
              })}
            >
              {secondaryCta.text}
            </a>
          )}
          <span id="secondary-cta-description" class="sr-only">Secondary call to action</span>
        </div>

        <!-- Stats -->
        {showStats && stats.length > 0 && (
          <div 
            class="hero-stats"
            data-animate="fade-up"
            data-delay="400"
            role="region"
            aria-labelledby="stats-heading"
          >
            <SubheadingTag id="stats-heading" class="sr-only">Company Statistics</SubheadingTag>
            {stats.map((stat, index) => (
              <div class="stat-item" key={index}>
                <div class="stat-number" aria-labelledby={`stat-${index}-label`}>
                  {stat.prefix && <span class="stat-prefix" aria-hidden="true">{stat.prefix}</span>}
                  <span class="stat-value" data-count-to={stat.number} aria-live="polite">0</span>
                  {stat.suffix && <span class="stat-suffix" aria-hidden="true">{stat.suffix}</span>}
                </div>
                <div class="stat-label" id={`stat-${index}-label`}>{stat.label}</div>
              </div>
            ))}
          </div>
        )}
      </div>

      <!-- Hero Visual - Regular Split -->
      {variant === 'split' && heroImage && (
        <div 
          class="hero-visual"
          data-animate="fade-left"
          data-delay="200"
        >
          <div class="hero-image-container">
            <img 
              src={heroImage}
              alt={heroImageAlt}
              class="hero-image"
              width="600"
              height="400"
              loading="eager"
              decoding="async"
            />
            
            <!-- Updated Floating UI Elements for Website Transformation -->
            <div class="floating-ui floating-ui-1" data-animate="float" data-delay="1000" aria-hidden="true" role="presentation">
              <div class="ui-card">
                <div class="ui-status">
                  <div class="status-icon" aria-hidden="true">âœ“</div>
                  <span class="ui-text">Content Received</span>
                </div>
              </div>
            </div>
            
            <div class="floating-ui floating-ui-2" data-animate="float" data-delay="1500" aria-hidden="true" role="presentation">
              <div class="ui-card">
                <div class="ui-progress">
                  <div class="progress-bar" role="progressbar" aria-valuenow="85" aria-valuemin="0" aria-valuemax="100" aria-label="Build progress">
                    <div class="progress-fill" style="width: 85%"></div>
                  </div>
                  <span class="ui-text">Build Progress: 85%</span>
                </div>
              </div>
            </div>
            
            <div class="floating-ui floating-ui-3" data-animate="float" data-delay="2000" aria-hidden="true" role="presentation">
              <div class="ui-card">
                <div class="ui-performance">
                  <div class="performance-change">
                    <span class="before">3.2s</span>
                    <span class="arrow" aria-hidden="true">â†’</span>
                    <span class="after">0.8s</span>
                  </div>
                  <span class="ui-text">Load Time Improvement</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <!-- Process-Focused Variant -->
      {variant === 'process-focused' && (
        <div 
          class="hero-visual-process"
          data-animate="fade-left"
          data-delay="200"
        >
          <!-- Process Steps -->
          {showProcess && processSteps.length > 0 && (
            <section class="process-container" aria-labelledby="process-heading">
              <SubheadingTag id="process-heading" class="process-title">Your Simple Process</SubheadingTag>
              <ol class="process-steps" role="list">
                {processSteps.map((step, index) => (
                  <li 
                    class="process-step"
                    data-animate="fade-up"
                    data-delay={400 + (index * 100)}
                    key={index}
                  >
                    <div class="step-icon" aria-hidden="true">
                      <span class="step-emoji" role="img" aria-label={`Step ${step.number} icon`}>{step.icon}</span>
                      <span class="step-number">{step.number}</span>
                    </div>
                    <div class="step-content">
                      <h4 class="step-title">{step.title}</h4>
                      <p class="step-description">{step.description}</p>
                    </div>
                    {index < processSteps.length - 1 && (
                      <div class="step-connector" aria-hidden="true" role="presentation">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" focusable="false">
                          <path d="M5 12h14m-7-7l7 7-7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                      </div>
                    )}
                  </li>
                ))}
              </ol>
            </section>
          )}

          <!-- Before/After Comparison -->
          {showBeforeAfter && beforeAfter && (
            <section class="before-after-container" aria-labelledby="comparison-heading">
              <SubheadingTag id="comparison-heading" class="comparison-title">The Transformation</SubheadingTag>
              <div class="comparison-grid">
                <!-- Before -->
                <div class="comparison-item before">
                  <h4 class="comparison-label">Before</h4>
                  <div class="comparison-image">
                    <img 
                      src={beforeAfter.before.image}
                      alt={beforeAfter.before.alt}
                      width="300"
                      height="200"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>
                  <div class="comparison-stats">
                    {beforeAfter.before.stats.map((stat, index) => (
                      <div class="stat-row" key={index}>
                        <span class="stat-label">{stat.label}:</span>
                        <span class="stat-value before-value">{stat.value}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <!-- Arrow -->
                <div class="comparison-arrow" aria-hidden="true" role="presentation">
                  <svg width="48" height="48" viewBox="0 0 48 48" fill="none" focusable="false">
                    <path d="M8 24h32m-16-16l16 16-16 16" stroke="currentColor" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </div>

                <!-- After -->
                <div class="comparison-item after">
                  <h4 class="comparison-label">After</h4>
                  <div class="comparison-image">
                    <img 
                      src={beforeAfter.after.image}
                      alt={beforeAfter.after.alt}
                      width="300"
                      height="200"
                      loading="lazy"
                      decoding="async"
                    />
                  </div>
                  <div class="comparison-stats">
                    {beforeAfter.after.stats.map((stat, index) => (
                      <div class="stat-row" key={index}>
                        <span class="stat-label">{stat.label}:</span>
                        <span class="stat-value after-value">{stat.value}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </section>
          )}
        </div>
      )}
    </div>

    <!-- Client Logos / Social Proof -->
    {showLogos && clientLogos.length > 0 && (
      <section 
        class="hero-social-proof"
        data-animate="fade-up"
        data-delay="500"
        aria-labelledby="social-proof-heading"
      >
        <SubheadingTag id="social-proof-heading" class="social-proof-text">{trustedByText}</SubheadingTag>
        <div class="client-logos" role="list" aria-label="Client logos">
          {clientLogos.map((logo, index) => (
            <div class="logo-item" key={index} role="listitem">
              <img 
                src={logo.src}
                alt={logo.alt}
                width={logo.width || 120}
                height={logo.height || 40}
                loading="lazy"
                decoding="async"
              />
            </div>
          ))}
        </div>
      </section>
    )}
  </div>

  <!-- Scroll Indicator -->
  <div class="scroll-indicator" aria-hidden="true" role="presentation">
    <div class="scroll-mouse">
      <div class="scroll-wheel"></div>
    </div>
    <span class="scroll-text">Scroll to explore</span>
  </div>
</section>

<style define:vars={{
  primaryColor: theme.colors.primary[500],
  primaryHover: theme.colors.primary[600],
  primaryLight: theme.colors.primary[100],
  secondaryColor: theme.colors.secondary[500],
  neutralWhite: theme.colors.neutral[50],
  neutralGray: theme.colors.neutral[500],
  neutralDark: theme.colors.neutral[900],
  neutralLight: theme.colors.neutral[100],
  successColor: '#10b981',
  warningColor: '#f59e0b',
  fontSans: theme.typography.fontFamily.sans.join(', '),
  fontDisplay: theme.typography.fontFamily.display.join(', '),
  spacing2: theme.spacing[2],
  spacing3: theme.spacing[3],
  spacing4: theme.spacing[4],
  spacing6: theme.spacing[6],
  spacing8: theme.spacing[8],
  spacing12: theme.spacing[12],
  spacing16: theme.spacing[16],
  spacing20: theme.spacing[20],
  spacing24: theme.spacing[24],
  spacing32: theme.spacing[32],
  borderRadiusLg: theme.borderRadius.lg,
  borderRadius2xl: theme.borderRadius['2xl'],
  shadowLg: theme.boxShadow.lg,
  shadow2xl: theme.boxShadow['2xl']
}}>
  /* Accessibility Utilities */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: var(--neutralDark);
    color: var(--neutralWhite);
    padding: 8px 16px;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
    z-index: 9999;
    transition: top 0.3s ease;
  }

  .skip-link:focus {
    top: 6px;
  }

  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    overflow: hidden;
  }

  /* Background Elements */
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
  }

  .hero-video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-bg-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hero-video-overlay,
  .hero-bg-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.4);
  }

  /* Animated Background */
  .hero-decoration {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    pointer-events: none;
  }

  .floating-shapes {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .shape {
    position: absolute;
    border-radius: 50%;
    background: linear-gradient(45deg, var(--primaryColor), var(--secondaryColor));
    opacity: 0.1;
    animation: float 6s ease-in-out infinite;
  }

  .shape-1 {
    width: 200px;
    height: 200px;
    top: 10%;
    left: 10%;
    animation-delay: 0s;
  }

  .shape-2 {
    width: 150px;
    height: 150px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }

  .shape-3 {
    width: 100px;
    height: 100px;
    bottom: 20%;
    left: 60%;
    animation-delay: 4s;
  }

  .shape-4 {
    width: 80px;
    height: 80px;
    top: 30%;
    right: 40%;
    animation-delay: 1s;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(180deg); }
  }

  /* Container */
  .hero-container {
    position: relative;
    z-index: 10;
    max-width: 1280px;
    margin: 0 auto;
    padding: var(--spacing8) var(--spacing4);
    width: 100%;
  }

  @media (min-width: 768px) {
    .hero-container {
      padding: var(--spacing16) var(--spacing6);
    }
  }

  /* Content Layout */
  .hero-content {
    display: grid;
    gap: var(--spacing12);
    align-items: center;
  }

  .hero-split .hero-content,
  .hero-process-focused .hero-content {
    grid-template-columns: 1fr;
  }

  @media (min-width: 1024px) {
    .hero-split .hero-content,
    .hero-process-focused .hero-content {
      grid-template-columns: 1fr 1fr;
      gap: var(--spacing16);
    }
  }

  .hero-centered .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-left-aligned .hero-content {
    max-width: 600px;
  }

  /* Text Content - Enhanced for Accessibility */
  .hero-text {
    font-family: var(--fontSans);
  }

  .hero-subheadline {
    display: inline-block;
    font-size: 1rem; /* Increased from 0.875rem for better readability */
    font-weight: 600;
    color: var(--primaryColor);
    background: var(--primaryLight);
    padding: var(--spacing2) var(--spacing4);
    border-radius: var(--borderRadiusLg);
    margin-bottom: var(--spacing6);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.4; /* Added for better readability */
  }

  .hero-headline {
    font-family: var(--fontDisplay);
    font-size: 2.5rem;
    font-weight: 800;
    line-height: 1.2; /* Improved from 1.1 for readability */
    color: var(--neutralDark);
    margin: 0 0 var(--spacing6) 0;
    background: linear-gradient(135deg, var(--neutralDark) 0%, var(--primaryColor) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    /* Fallback for browsers that don't support background-clip */
    color: var(--neutralDark);
  }

  /* Ensure text is readable when background-clip isn't supported */
  @supports not (-webkit-background-clip: text) {
    .hero-headline {
      background: none;
      -webkit-text-fill-color: unset;
      color: var(--neutralDark);
    }
  }

  @media (min-width: 640px) {
    .hero-headline {
      font-size: 3.5rem;
    }
  }

  @media (min-width: 1024px) {
    .hero-headline {
      font-size: 4rem;
    }
  }

  .hero-description {
    font-size: 1.25rem; /* Increased from 1.125rem */
    line-height: 1.6; /* Improved for readability */
    color: var(--neutralGray);
    margin: 0 0 var(--spacing8) 0;
    max-width: 600px;
  }

  /* CTA Buttons - Enhanced Focus States */
  .hero-cta {
    display: flex;
    flex-direction: column;
    gap: var(--spacing4);
    margin-bottom: var(--spacing12);
  }

  @media (min-width: 640px) {
    .hero-cta {
      flex-direction: row;
      gap: var(--spacing6);
    }
  }

  .cta-primary {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing2);
    font-family: var(--fontSans);
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--neutralWhite);
    background: var(--primaryColor);
    text-decoration: none;
    padding: var(--spacing4) var(--spacing8);
    border-radius: var(--borderRadiusLg);
    transition: all 0.3s ease;
    box-shadow: var(--shadowLg);
    border: 2px solid var(--primaryColor);
    min-height: 44px; /* WCAG minimum touch target */
    justify-content: center;
  }

  .cta-primary:hover,
  .cta-primary:focus {
    background: var(--primaryHover);
    border-color: var(--primaryHover);
    transform: translateY(-2px);
    box-shadow: var(--shadow2xl);
  }

  .cta-primary:focus {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .cta-primary:focus:not(:focus-visible) {
    outline: none;
  }

  .cta-primary:focus-visible {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .cta-icon {
    transition: transform 0.3s ease;
  }

  .cta-primary:hover .cta-icon {
    transform: translateX(4px);
  }

  .cta-secondary {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-family: var(--fontSans);
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--neutralDark);
    text-decoration: none;
    padding: var(--spacing4) var(--spacing6);
    border-radius: var(--borderRadiusLg);
    transition: all 0.3s ease;
    border: 2px solid transparent;
    min-height: 44px; /* WCAG minimum touch target */
  }

  .cta-secondary:hover,
  .cta-secondary:focus {
    color: var(--primaryColor);
    background: var(--primaryLight);
    border-color: var(--primaryColor);
  }

  .cta-secondary:focus {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .cta-secondary:focus:not(:focus-visible) {
    outline: none;
  }

  .cta-secondary:focus-visible {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Stats - Enhanced Accessibility */
  .hero-stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--spacing6);
    padding-top: var(--spacing8);
    border-top: 1px solid #e2e8f0;
  }

  @media (min-width: 640px) {
    .hero-stats {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    font-family: var(--fontDisplay);
    font-size: 2rem;
    font-weight: 700;
    color: var(--primaryColor);
    line-height: 1.2;
    margin-bottom: var(--spacing2);
  }

  .stat-label {
    font-size: 1rem; /* Increased from 0.875rem */
    color: var(--neutralGray);
    font-weight: 500;
    line-height: 1.4;
  }

  /* Hero Visual */
  .hero-visual {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .hero-image-container {
    position: relative;
    max-width: 600px;
    width: 100%;
  }

  .hero-image {
    width: 100%;
    height: auto;
    border-radius: var(--borderRadius2xl);
    box-shadow: var(--shadow2xl);
  }

  /* Updated Floating UI Elements */
  .floating-ui {
    position: absolute;
    z-index: 10;
    animation: floatUI 4s ease-in-out infinite;
  }

  .floating-ui-1 {
    top: 10%;
    left: -10%;
    animation-delay: 0s;
  }

  .floating-ui-2 {
    top: 60%;
    right: -15%;
    animation-delay: 1s;
  }

  .floating-ui-3 {
    bottom: 20%;
    left: 15%;
    animation-delay: 2s;
  }

  @keyframes floatUI {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }

  .ui-card {
    background: var(--neutralWhite);
    border-radius: var(--borderRadiusLg);
    padding: var(--spacing4);
    box-shadow: var(--shadowLg);
    border: 1px solid #e2e8f0;
    backdrop-filter: blur(10px);
    min-width: 120px;
  }

  .ui-status {
    display: flex;
    align-items: center;
    gap: var(--spacing2);
  }

  .status-icon {
    width: 20px;
    height: 20px;
    background: var(--successColor);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 12px;
    font-weight: 600;
  }

  .ui-progress {
    display: flex;
    flex-direction: column;
    gap: var(--spacing2);
  }

  .progress-bar {
    width: 80px;
    height: 8px; /* Increased from 6px for better visibility */
    background: #e2e8f0;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: var(--primaryColor);
    transition: width 2s ease;
    border-radius: 4px;
  }

  .ui-performance {
    text-align: center;
  }

  .performance-change {
    display: flex;
    align-items: center;
    gap: 6px; /* Increased spacing */
    margin-bottom: var(--spacing2);
    justify-content: center;
  }

  .before {
    color: #ef4444;
    font-weight: 600;
    font-size: 14px;
  }

  .arrow {
    color: var(--neutralGray);
    font-weight: 600;
    font-size: 16px;
  }

  .after {
    color: var(--successColor);
    font-weight: 600;
    font-size: 14px;
  }

  .ui-text {
    font-size: 0.875rem; /* Maintained readable size */
    color: var(--neutralGray);
    font-weight: 500;
    line-height: 1.4;
  }

  /* Process-Focused Variant - Enhanced Headings */
  .hero-visual-process {
    display: flex;
    flex-direction: column;
    gap: var(--spacing12);
  }

  .process-container {
    background: var(--neutralWhite);
    border-radius: var(--borderRadius2xl);
    padding: var(--spacing8);
    box-shadow: var(--shadowLg);
  }

  .process-title {
    font-family: var(--fontDisplay);
    font-size: 1.75rem; /* Increased from 1.5rem */
    font-weight: 700;
    color: var(--neutralDark);
    margin-bottom: var(--spacing6);
    text-align: center;
    line-height: 1.3;
  }

  .process-steps {
    display: flex;
    flex-direction: column;
    gap: var(--spacing6);
    list-style: none;
    padding: 0;
    margin: 0;
  }

  @media (min-width: 768px) {
    .process-steps {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }
  }

  .process-step {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    position: relative;
  }

  .step-icon {
    position: relative;
    margin-bottom: var(--spacing4);
  }

  .step-emoji {
    font-size: 2.5rem; /* Increased from 2rem */
    margin-bottom: var(--spacing2);
    display: block;
  }

  .step-number {
    position: absolute;
    bottom: -8px;
    right: -8px;
    width: 28px; /* Increased from 24px */
    height: 28px;
    background: var(--primaryColor);
    color: white;
    border-radius: 50%;
    font-size: 0.875rem; /* Increased from 0.75rem */
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .step-content {
    flex: 1;
  }

  .step-title {
    font-family: var(--fontSans);
    font-size: 1.25rem; /* Increased from 1.125rem */
    font-weight: 600;
    color: var(--neutralDark);
    margin-bottom: var(--spacing2);
    line-height: 1.3;
  }

  .step-description {
    font-size: 1rem; /* Increased from 0.875rem */
    color: var(--neutralGray);
    line-height: 1.5;
    margin: 0;
  }

  .step-connector {
    display: none;
    position: absolute;
    right: -20px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--primaryColor);
  }

  @media (min-width: 768px) {
    .step-connector {
      display: block;
    }
    
    .process-step:last-child .step-connector {
      display: none;
    }
  }

  /* Before/After Comparison - Proper Heading Hierarchy */
  .before-after-container {
    background: var(--neutralWhite);
    border-radius: var(--borderRadius2xl);
    padding: var(--spacing8);
    box-shadow: var(--shadowLg);
  }

  .comparison-title {
    font-family: var(--fontDisplay);
    font-size: 1.75rem; /* Increased from 1.5rem */
    font-weight: 700;
    color: var(--neutralDark);
    margin-bottom: var(--spacing6);
    text-align: center;
    line-height: 1.3;
  }

  .comparison-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--spacing6);
    align-items: center;
  }

  @media (min-width: 768px) {
    .comparison-grid {
      grid-template-columns: 1fr auto 1fr;
      gap: var(--spacing8);
    }
  }

  .comparison-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .comparison-label {
    font-size: 1rem; /* Increased from 0.875rem */
    font-weight: 600;
    margin-bottom: var(--spacing3);
    padding: var(--spacing2) var(--spacing4);
    border-radius: var(--borderRadiusLg);
    line-height: 1.4;
  }

  .before .comparison-label {
    background: #fef2f2;
    color: #dc2626;
  }

  .after .comparison-label {
    background: #f0fdf4;
    color: #16a34a;
  }

  .comparison-image {
    margin-bottom: var(--spacing4);
    border-radius: var(--borderRadiusLg);
    overflow: hidden;
    box-shadow: var(--shadowLg);
  }

  .comparison-image img {
    width: 100%;
    height: auto;
    display: block;
  }

  .comparison-stats {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: var(--spacing2);
  }

  .stat-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing2) var(--spacing3);
    background: #f8fafc;
    border-radius: var(--spacing2);
  }

  .stat-label {
    font-size: 0.875rem;
    color: var(--neutralGray);
    font-weight: 500;
  }

  .stat-value {
    font-size: 0.875rem;
    font-weight: 600;
  }

  .before-value {
    color: #dc2626;
  }

  .after-value {
    color: var(--successColor);
  }

  .comparison-arrow {
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--primaryColor);
    order: -1;
  }

  @media (min-width: 768px) {
    .comparison-arrow {
      order: 0;
    }
  }

  /* Social Proof - Proper Heading */
  .hero-social-proof {
    margin-top: var(--spacing16);
    text-align: center;
  }

  .social-proof-text {
    font-size: 1rem; /* Increased from 0.875rem */
    color: var(--neutralGray);
    margin: 0 0 var(--spacing6) 0;
    font-weight: 500;
    line-height: 1.4;
  }

  .client-logos {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: var(--spacing8);
    flex-wrap: wrap;
  }

  .logo-item {
    opacity: 0.6;
    transition: opacity 0.3s ease;
    filter: grayscale(100%);
  }

  .logo-item:hover,
  .logo-item:focus-within {
    opacity: 1;
    filter: grayscale(0%);
  }

  .logo-item img {
    height: 40px;
    width: auto;
  }

  /* Scroll Indicator */
  .scroll-indicator {
    position: absolute;
    bottom: var(--spacing8);
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing2);
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateX(-50%) translateY(0); }
    40% { transform: translateX(-50%) translateY(-10px); }
    60% { transform: translateX(-50%) translateY(-5px); }
  }

  .scroll-mouse {
    width: 24px;
    height: 40px;
    border: 2px solid var(--neutralGray);
    border-radius: 12px;
    position: relative;
  }

  .scroll-wheel {
    width: 4px;
    height: 8px;
    background: var(--neutralGray);
    border-radius: 2px;
    position: absolute;
    top: 8px;
    left: 50%;
    transform: translateX(-50%);
    animation: scroll 2s infinite;
  }

  @keyframes scroll {
    0% { top: 8px; opacity: 0; }
    10%, 90% { opacity: 1; }
    100% { top: 24px; opacity: 0; }
  }

  .scroll-text {
    font-size: 0.875rem; /* Increased from 0.75rem */
    color: var(--neutralGray);
    font-weight: 500;
  }

  /* Animations */
  [data-animate] {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.8s ease;
  }

  [data-animate="fade-left"] {
    transform: translateX(30px);
  }

  [data-animate].animate {
    opacity: 1;
    transform: translateY(0);
  }

  [data-animate="fade-left"].animate {
    transform: translateX(0);
  }

  /* High Contrast Mode Support */
  @media (prefers-contrast: high) {
    .hero-headline {
      background: none;
      -webkit-text-fill-color: unset;
      color: var(--neutralDark);
    }
    
    .cta-primary:focus,
    .cta-secondary:focus {
      outline: 3px solid;
      outline-color: ButtonText;
    }
    
    .logo-item {
      filter: none;
      opacity: 1;
    }
  }

  /* Mobile Optimizations */
  @media (max-width: 640px) {
    .hero {
      min-height: 90vh;
    }

    .floating-ui {
      display: none;
    }

    .hero-stats {
      grid-template-columns: 1fr 1fr;
    }

    .stat-number {
      font-size: 1.75rem; /* Increased from 1.5rem */
    }

    .scroll-indicator {
      display: none;
    }

    .process-container,
    .before-after-container {
      padding: var(--spacing6);
    }

    .comparison-grid {
      gap: var(--spacing4);
    }

    .hero-headline {
      font-size: 2.25rem; /* Improved mobile sizing */
    }

    .hero-description {
      font-size: 1.125rem; /* Maintained readability on mobile */
    }
  }

  /* Focus Management for Keyboard Navigation */
  .hero a:focus,
  .hero button:focus {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  .hero a:focus:not(:focus-visible),
  .hero button:focus:not(:focus-visible) {
    outline: none;
  }

  .hero a:focus-visible,
  .hero button:focus-visible {
    outline: 3px solid var(--primaryColor);
    outline-offset: 2px;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .shape,
    .floating-ui,
    .scroll-indicator,
    .scroll-wheel,
    .notification-dot,
    .progress-fill {
      animation: none;
    }
    
    [data-animate] {
      opacity: 1;
      transform: none;
      transition: none;
    }
    
    .cta-primary,
    .cta-secondary {
      transition: none;
    }
    
    .cta-primary:hover,
    .cta-secondary:hover {
      transform: none;
    }
  }

  /* Dark Mode Support */
  @media (prefers-color-scheme: dark) {
    .hero {
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    }
    
    .hero-headline,
    .process-title,
    .comparison-title,
    .step-title {
      color: var(--neutralWhite);
    }
    
    .hero-description,
    .step-description,
    .stat-label,
    .ui-text,
    .social-proof-text {
      color: #cbd5e1;
    }
    
    .ui-card,
    .process-container,
    .before-after-container {
      background: #1e293b;
      border-color: #334155;
    }
    
    .stat-row {
      background: #334155;
    }
  }

  /* Print Styles */
  @media print {
    .hero-decoration,
    .floating-ui,
    .scroll-indicator,
    .hero-video,
    .hero-bg-image {
      display: none;
    }
    
    .hero {
      min-height: auto;
      background: white;
      color: black;
    }
    
    .hero-headline {
      background: none;
      -webkit-text-fill-color: unset;
      color: black;
    }
    
    .cta-primary,
    .cta-secondary {
      border: 2px solid black;
      color: black;
      background: white;
    }
  }
</style>

<script>
  // Hero Animation Controller with Enhanced Accessibility
  class HeroAnimations {
    constructor() {
      this.animatedElements = document.querySelectorAll('[data-animate]');
      this.statElements = document.querySelectorAll('[data-count-to]');
      this.progressBars = document.querySelectorAll('.progress-fill');
      this.hasAnimated = false;
      this.prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      
      this.init();
    }

    init() {
      // Skip animations if user prefers reduced motion
      if (this.prefersReducedMotion) {
        this.showAllElements();
        return;
      }

      // Initial animation on load
      this.animateOnLoad();
      
      // Counter animations
      this.setupCounters();
      
      // Progress bar animations
      this.setupProgressBars();
      
      // Intersection observer for scroll-triggered animations
      this.setupScrollAnimations();
      
      // Keyboard navigation enhancements
      this.enhanceKeyboardNavigation();
    }

    showAllElements() {
      this.animatedElements.forEach(el => {
        el.style.opacity = '1';
        el.style.transform = 'none';
      });
    }

    animateOnLoad() {
      // Announce to screen readers that content is loading
      this.announceToScreenReader('Page content is loading');
      
      setTimeout(() => {
        this.animatedElements.forEach((el, index) => {
          const delay = parseInt(el.dataset.delay) || 0;
          setTimeout(() => {
            el.classList.add('animate');
          }, delay);
        });
        this.hasAnimated = true;
        
        // Announce completion to screen readers
        setTimeout(() => {
          this.announceToScreenReader('Page content loaded');
        }, 1000);
      }, 500);
    }

    setupCounters() {
      const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !entry.target.hasAnimated) {
            this.animateCounter(entry.target);
            entry.target.hasAnimated = true;
          }
        });
      }, observerOptions);

      this.statElements.forEach(el => {
        observer.observe(el);
      });
    }

    setupProgressBars() {
      const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !entry.target.hasAnimated) {
            const targetWidth = entry.target.style.width;
            entry.target.style.width = '0%';
            setTimeout(() => {
              entry.target.style.width = targetWidth;
              // Update aria-valuenow for screen readers
              const progressBar = entry.target.closest('[role="progressbar"]');
              if (progressBar) {
                const value = parseInt(targetWidth);
                progressBar.setAttribute('aria-valuenow', value);
              }
            }, 100);
            entry.target.hasAnimated = true;
          }
        });
      }, observerOptions);

      this.progressBars.forEach(bar => {
        observer.observe(bar);
      });
    }

    animateCounter(element) {
      const target = parseInt(element.dataset.countTo);
      const duration = 2000;
      const stepTime = Math.abs(Math.floor(duration / target));
      
      let counter = 0;
      const timer = setInterval(() => {
        counter += Math.ceil(target / 50);
        if (counter >= target) {
          counter = target;
          clearInterval(timer);
        }
        element.textContent = counter.toLocaleString();
        
        // Update aria-live region for screen readers
        element.setAttribute('aria-label', `${counter.toLocaleString()} ${element.nextElementSibling?.textContent || ''}`);
      }, stepTime);
    }

    setupScrollAnimations() {
      if (this.prefersReducedMotion) return;
      
      const shapes = document.querySelectorAll('.shape');
      
      let ticking = false;
      const updateParallax = () => {
        const scrolled = window.pageYOffset;
        const parallax = scrolled * 0.5;
        
        shapes.forEach((shape, index) => {
          const speed = 0.5 + (index * 0.1);
          shape.style.transform = `translateY(${parallax * speed}px) rotate(${scrolled * 0.1}deg)`;
        });
        
        ticking = false;
      };
      
      window.addEventListener('scroll', () => {
        if (!ticking) {
          requestAnimationFrame(updateParallax);
          ticking = true;
        }
      });
    }

    enhanceKeyboardNavigation() {
      // Improve focus management for the hero section
      const focusableElements = document.querySelectorAll(
        '.hero a, .hero button, .hero [tabindex]:not([tabindex="-1"])'
      );
      
      // Add skip links functionality
      const skipLink = document.querySelector('.skip-link');
      if (skipLink) {
        skipLink.addEventListener('click', (e) => {
          e.preventDefault();
          const target = document.querySelector(skipLink.getAttribute('href')) || 
                        document.querySelector('#main-content') ||
                        document.querySelector('main');
          if (target) {
            target.focus();
            target.scrollIntoView({ behavior: 'smooth' });
          }
        });
      }
    }

    announceToScreenReader(message) {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;
      
      document.body.appendChild(announcement);
      
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new HeroAnimations();
  });

  // Listen for reduced motion preference changes
  window.matchMedia('(prefers-reduced-motion: reduce)').addEventListener('change', (e) => {
    if (e.matches) {
      document.documentElement.style.setProperty('--animation-duration', '0ms');
      // Remove all animations
      document.querySelectorAll('.shape, .floating-ui, .scroll-indicator').forEach(el => {
        el.style.animation = 'none';
      });
    }
  });
</script>